Bash Manual – Detailed Summary for Minishell

Bash (Bourne Again SHell) is a command-line interpreter that allows users to execute commands, manage processes, handle scripts, and control input/output.
Understanding its behavior is essential for implementing Minishell.

----------------------------------------------
1. Command Execution & Process Management
----------------------------------------------
Types of Commands:
1. External commands → Programs found in directories listed in $PATH (e.g., /bin/ls).
2. Built-in commands → Shell-internal commands (e.g., cd, export).

Execution Process:
- The shell receives a command and checks whether it is built-in or external.
- For external commands, it:
  1. Looks up the executable using $PATH.
  2. Creates a child process using fork().
  3. Executes the command in the child with execve().
  4. Waits for the child to terminate using waitpid().

Example (ls -l execution in C):

```c
pid_t pid = fork();
if (pid == 0) {
    execve("/bin/ls", args, envp);
    perror("execve failed");
    exit(1);
} else {
    waitpid(pid, &status, 0);
}
```

Built-in commands execute without forking, directly in the parent shell.

----------------------------------------------
2. Command Parsing & Tokenization
----------------------------------------------
Commands in Bash follow a predictable syntax:
```
command [arguments] [redirections] [operators]
```
Example:
```
echo "Hello World" > output.txt
```
Special Characters:
- Spaces & Tabs → Used as argument separators.
- Quotes (' ") → Used for grouping arguments.
- Escape (\) → Prevents special character interpretation.

----------------------------------------------
3. Redirections & File Descriptors
----------------------------------------------
Types of Redirections:
1. Input (<) → Redirects stdin from a file.
2. Output (>) → Redirects stdout to a file (overwrites).
3. Append (>>) → Redirects stdout to a file (appends).
4. Heredoc (<<) → Reads multiple lines until a delimiter.

Example:
```
ls > output.txt
cat < input.txt
echo "Hello" >> log.txt
cat << EOF
This is a heredoc
EOF
```

----------------------------------------------
4. Pipes & Command Chaining
----------------------------------------------
Pipes (|) allow the output of one process to be used as input for another.
Implemented using pipe(), dup2(), and fork().

Example (ls | grep .c in C):

```c
int fd[2];
pipe(fd);
if (fork() == 0) {
    dup2(fd[1], STDOUT_FILENO);
    close(fd[0]); close(fd[1]);
    execve("/bin/ls", args, envp);
} else {
    dup2(fd[0], STDIN_FILENO);
    close(fd[0]); close(fd[1]);
    execve("/bin/grep", args, envp);
}
```

----------------------------------------------
5. Environment Variables & Expansion
----------------------------------------------
Common Variables:
- $HOME, $USER, $PATH → Store system/user settings.
- $? → Stores the exit status of the last command.

Setting and Expanding Variables:
```
VAR="Hello"
export VAR
echo $VAR
```

----------------------------------------------
6. Signal Handling
----------------------------------------------
Important Signals:
- SIGINT (CTRL+C) → Interrupts a process.
- SIGQUIT (CTRL+\) → Kills a process.

Example C Signal Handling:

```c
void sigint_handler(int sig) {
    (void)sig;
    write(1, "
Minishell> ", 12);
}

signal(SIGINT, sigint_handler);
signal(SIGQUIT, SIG_IGN);
```

----------------------------------------------
7. Built-in Commands
----------------------------------------------
Essential built-ins: echo, cd, pwd, export, unset, env, exit.
Built-ins should execute in the main process (no fork()).

----------------------------------------------
Final Key Takeaways for Minishell:
- Parsing is crucial – handle spaces, quotes, and operators correctly.
- Use fork(), execve(), pipe(), dup2() for execution.
- Manage file descriptors properly in redirections & pipes.
- Handle signals (SIGINT, SIGQUIT) properly.
- Built-in commands should not fork.
