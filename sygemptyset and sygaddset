//----sygemptyset----//

#include <signal.h>

int sigemptyset(sigset_t *set);

set = a pointer a struct of signals.
return value: 0 if success, -1 if failure.

Set all the signals to empty. We should use it when we use sigaction (initialize the sa_mask with sigemptyset) to be sure that no signals are blocked. Afterward, we can use sigaddset() to add the signals we want to block.

//----sygaddset-----//

#include <signal.h>

int sigaddset(sigset_t *set, int signum);

set : pointer to a struct of signals
signum : number of the signal to add

return value: 0 if success, -1 if failure.

Add a signal to a structure of signals. 

// Example with sigemptyset and sigaddset

#include <stdio.h>
#include <signal.h>

int main() {
    sigset_t set;

    sigemptyset(&set);  // Initialise the set with empty (desactivate the bit from 1 to 0)
    sigaddset(&set, SIGINT);  // add SIGINT (CTRL+C)
    sigaddset(&set, SIGQUIT); // add SIGQUIT (CTRL+\)
    return 0;
}

// Example with sigaction, we want to ignore ctrl+\ (sigquit) during 5sec but not ctrl+C, after pressing ctrl+C and waiting 5sec we can use ctrl+\
Note : if in understood the minishell subject properly, ctrl+\ should do nothing, this is why we will need to ignore it at all time

#include <stdio.h>
#include <signal.h>
#include <unistd.h>

void handle_sigint(int sig) {
    (void)sig; // to avoid the warning when compiling
    write(1, "\nHandling SIGINT... SIGQUIT is blocked during this time!\n", 55);
    sleep(5);  // Simulation of a long process
    write(1, "SIGINT handling done. SIGQUIT is unblocked now.\n", 47);
}

int main() {
    struct sigaction sa;
    sa.sa_handler = handle_sigint;
    sa.sa_flags = 0;

    sigemptyset(&sa.sa_mask); // initialize with empty
    sigaddset(&sa.sa_mask, SIGQUIT);  // Block SIGQUIT while handling SIGINT

    sigaction(SIGINT, &sa, NULL);

    while (1) {
        write(1, "Running... Press CTRL+C\n", 24);
        sleep(1); //slowing down the while loop to avoid saturating cpu, will be replaced by readline in the minishell :)
    }
}

// If we want to ignore sigquit forever we can set up sa_handler with SIG_IGN as the example below 

int main() {
    struct sigaction sa;
    sa.sa_handler = SIG_IGN; // will ignore the signal passed in parameter of sigaction
    sa.sa_flags = 0;

    sigemptyset(&sa.sa_mask); // initialize desativating the bytes

    sigaction(SIGQUIT, &sa, NULL);

    while (1) {
        write(1, "Running... Press CTRL+C\n", 24);
        sleep(1); //slowing down the while loop to avoid saturating cpu, will be replaced by readline in the minishell
    }
}
