s_all {
	char	**cmds;
	char 	*cmd;
	int	infile;
	int	outfile;
	//(*f)	built_in;
}

ex :: <infile ls -l

cmds = {"/bin/ls", "-l"};
cmd = "ls";      pour (perror(cmd))
infile = fd = open("infile");
outfile = -1;

si erreur
cmds = NULL;




!!touch here | echo see | cat > outfile

{
	if (!built_in)
		execve
	else
		&built_in
}

could we not
ok, so we can't, but how about just opening every pipe on the spot ? just, have every pipe open into the table, and pass down the iterator for it down te children recursive, like ::

all pipes are open in an int *pipefds[2] (or int **pipefds, whatever, and we close them all at the end of it)
with as many pipes as cmd_ct - 1;

int	outfile(pipefds, i, cmd)
{
	if (cmd->outfile != -2)
	{
		if (dup2(cmd->outfile, 1) == -1)
		{
			perror("dup2");
			return (EXIT_FAILURE);
		}
	}
	else if (cmd->next)
	{
		if (dup2(pipefd[i + 1][1], 1) == -1)
		{
			perror("dup2");
			return (EXIT_FAILURE);
		}
	}
}

int	infile_outfile(pipefds, i, cmd)
{
	if (cmd->infile != -2)
	{
		if (dup2(cmd->infile, 0) == -1)
		{
			perror("dup2");
			return (EXIT_FAILURE);
		}
	}
	else if (i != -1)
	{
		if (dup2(pipefd[i][0], 0) == -1)
		{
			perror("dup2");
			return (EXIT_FAILURE);
		}
	}
	outfile(pipefds, i, cmd);
}

child_process_call(int **pipefds, int i, t_cmd *cmd, char **envp)
{
	pid_t new_child = 4;
	
	if (cmd->next)
	{
		new_child = fork();
		if (new_child == -1)
		{
			perror("fork");
			return (EXIT_FAILURE);
			//won't repeat this, but basically instead of
			//"return (EXIT_FAILURE)"
			//we'll have
			//"return (exit_fail(pipefds, cmd, envp, "fork"))"
			//which does the perror, frees everything, and returns EXIT_FAILURE;
		}
	}
	if (new_child == 0)
		exit(child_process_call(pipefds, i + 1, cmd->next, envp);
	else
	{
		if (infile_outfile(pipefds, i, cmd) == EXIT_FAILURE)
			return (EXIT_FAILURE);
		if (cmd->argv && execve(cmd->argv[0], cmd->argv, envp) == -1)
		{
			perror(cmd->cmd);
			return (EXIT_FAILURE);
		}
		free_pipes(pipefds); //free_pipes closes all the pipes and frees the array of pipes;
		free_cmds_new(cmd); // free_cmds_new frees every command in the list, previous and next;
		//we'll need a free for the environment too (do we really need to send it here ? i wonder); anyway all of these frees will be amalgamated into one huge free_all function;
	}
	return (EXIT_SUCCESS);
}

and in the main (t_cmd *cmd, char **envp, int total)
{
	int	**pipefds;
	pid_t	child1;

	pipefds = get_pipes(total);
	if (!pipefds)
		return (-1);
	child1 = fork();
	if (child1 == -1)
	{
		perror("fork");
		free_pipes(pipefds);
		return (-1);
	}
	if (child == 0)
		exit(child_process_call(pipefds, -1, cmd, envp));
	else
	{
		wait(NULL);
		//free_cmds, free_pipes etc., probably that wait is after whatever signal thingy we might want to implement later, supposedly;
	}
	return (0);
}
