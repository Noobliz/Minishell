char *getenv(const char *name)
<stdlib.h>
in env, variables are held as a char **array of "VAR=VALUE"-type strings -- this function takes VAR as argument and returns VALUE, both as statically allocated strings;
!!if VAR doesn't exist, returns NULL;


note : curious what this would be useful for, given the environment we need would have to be malleable :: can we manipulate the og env pointer to point to a full, dyn allocated copy we can mod ? further testing needed;

updated note : env** pointer is not malleable at all, and does not update the current environment -- hence why this function does not need access to it at all. a little confused as to when we'll need this then, if as assumed we'll have to make our own envrionment from scratch;


example :: display the PATH var;

#include <stdlib.h>
#include <stdio.h>

int main(void)
{
	printf("here the path var :: %s", getenv("PATH"));
	return (0);
}


